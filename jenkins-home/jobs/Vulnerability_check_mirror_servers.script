#!/bin/bash +x
rm -rf mirrorServers
mkdir -p mirrorServers

rm -fr hotchpotch
git clone git@github.com:jmab20/hotchpotch.git
cd hotchpotch

git pull origin develop

cd vulnerabilitiesChecks

echo
echo

#Download cpe dictionary
rm -rf tempUnzip
mkdir tempUnzip
cd tempUnzip
CPE_VERSION=23
wget -q https://nvd.nist.gov/feeds/xml/cpe/dictionary/official-cpe-dictionary_v2.3.xml.zip -O cpeDictionary.xml.zip
unzip cpeDictionary.xml.zip
mv *xml cpeDictionary.xml
cd ..
cp tempUnzip/cpeDictionary.xml .

SERVERS=(
127.0.0.1:mir-local
)

for i in "${SERVERS[@]}"; do
  IP=$(echo $i| cut -d":" -f1)
  NAME=$(echo $i| cut -d":" -f2)
  echo | tee vulnerabilities_mirror_$NAME.txt
  echo "@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@" | tee -a vulnerabilities_mirror_$NAME.txt
  echo | tee -a vulnerabilities_mirror_$NAME.txt
  echo "Seeking installed rpms at $NAME" | tee -a vulnerabilities_mirror_$NAME.txt
  echo "----------------------------------------------------------------------------------------" | tee -a vulnerabilities_mirror_$NAME.txt
  sshpass -p ${SECRET_PASS} scp -o StrictHostKeyChecking=no -o LogLevel=error checkRpms.sh ${SECRET_USER}@${IP}:
  RPMS_OUT=$(sshpass -p ${SECRET_PASS} ssh -o StrictHostKeyChecking=no -o LogLevel=error ${SECRET_USER}@${IP} "chmod +x ./checkRpms.sh && ./checkRpms.sh")

  while read -r item; do
    if [[ $item == *"jdk"* ]]; then
      PACKAGE=$(echo $item | cut -d";" -f1 | grep -o '.*[^0-9._]')
      VERSION=$(echo $item | cut -d";" -f2 | cut -d"_" -f1)
      UPDATE=$(echo $item | cut -d";" -f2 | cut -d"_" -f2)
      echo "Seeking vulnerabilities for $PACKAGE - $VERSION - $UPDATE inside dictionary" | tee -a vulnerabilities_mirror_$NAME.txt
      PRESENT_AT_DICT=$(grep $(echo ":$PACKAGE:") cpeDictionary.xml | grep $(echo "$VERSION:") | grep $(echo "$UPDATE:"))
      if [ ! -z "$PRESENT_AT_DICT" ]; then
        URL=$(grep $(echo ":$PACKAGE:") cpeDictionary.xml | grep $(echo "$VERSION:") | grep $(echo "$UPDATE:") | grep "\<cpe\-$CPE_VERSION" | cut -d"\"" -f2)
        while read -r ITEM_URL; do
          echo $ITEM_URL
          CODES=$(curl -s https://services.nvd.nist.gov/rest/json/cves/1.0?cpeMatchString=$ITEM_URL | jq '.result.CVE_Items[] | "\(.cve.CVE_data_meta.ID) cvssV2=\(.impact.baseMetricV2.cvssV2.baseScore) cvssV3=\(.impact.baseMetricV3.cvssV3.baseScore)"' | sort -r -k2)
          echo "https://services.nvd.nist.gov/rest/json/cves/1.0?cpeMatchString=$ITEM_URL" | tee -a vulnerabilities_mirror_$NAME.txt
          if [ ! -z "$CODES" ]; then
            echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" | tee -a vulnerabilities_mirror_$NAME.txt
            while read -r ITEM_CODE; do
              echo ${ITEM_CODE} | tee -a vulnerabilities_mirror_$NAME.txt
            done <<< "$CODES"
            echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" | tee -a vulnerabilities_mirror_$NAME.txt
          else
            echo "No vulnerabilities found for $PACKAGE - $VERSION - $UPDATE" | tee -a vulnerabilities_mirror_$NAME.txt
          fi
        done <<< "$URL"
      else
        echo "$PACKAGE - $VERSION - $UPDATE is not present at dictionary" | tee -a vulnerabilities_mirror_$NAME.txt
      fi
    else
      PACKAGE=$(echo $item | cut -d";" -f1 | grep -o '.*[^0-9._]')
      VERSION=$(echo $item | cut -d";" -f2)
      echo "Seeking vulnerabilities for $(echo $PACKAGE:$VERSION) inside dictionary" | tee -a vulnerabilities_mirror_$NAME.txt
      PRESENT_AT_DICT=$(grep $(echo ":$PACKAGE") cpeDictionary.xml | grep $(echo "$VERSION:"))
      if [ ! -z "$PRESENT_AT_DICT" ]; then
        URL=$(grep $(echo ":$PACKAGE") cpeDictionary.xml | grep $(echo "$VERSION:") | grep "\<cpe\-$CPE_VERSION" | cut -d"\"" -f2)
        while read -r ITEM_URL; do
          echo $ITEM_URL
          CODES=$(curl -s https://services.nvd.nist.gov/rest/json/cves/1.0?cpeMatchString=$ITEM_URL | jq '.result.CVE_Items[] | "\(.cve.CVE_data_meta.ID) cvssV2=\(.impact.baseMetricV2.cvssV2.baseScore) cvssV3=\(.impact.baseMetricV3.cvssV3.baseScore)"' | sort -r -k2)
          echo "https://services.nvd.nist.gov/rest/json/cves/1.0?cpeMatchString=$ITEM_URL" | tee -a vulnerabilities_mirror_$NAME.txt
          if [ ! -z "$CODES" ]; then
            echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" | tee -a vulnerabilities_mirror_$NAME.txt
            while read -r ITEM_CODE; do
              echo ${ITEM_CODE} | tee -a vulnerabilities_mirror_$NAME.txt
            done <<< "$CODES"
            echo "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX" | tee -a vulnerabilities_mirror_$NAME.txt
          else
            echo "No vulnerabilities found for $PACKAGE:$VERSION" | tee -a vulnerabilities_mirror_$NAME.txt
          fi
        done <<< "$URL"
      else
        echo "$PACKAGE with version $VERSION is not present at dictionary" | tee -a vulnerabilities_mirror_$NAME.txt
      fi
    fi
    echo "-------------------...................-------------------" | tee -a vulnerabilities_mirror_$NAME.txt
  done <<< "$RPMS_OUT"

  sshpass -p ${SECRET_PASS} ssh -o StrictHostKeyChecking=no -o LogLevel=error ${SECRET_USER}@${IP} "rm -r checkRpms.sh"

  echo "----------------------------------------------------------------------------------------" | tee -a vulnerabilities_mirror_$NAME.txt
  echo | tee -a vulnerabilities_mirror_$NAME.txt
  echo | tee -a vulnerabilities_mirror_$NAME.txt
  echo | tee -a vulnerabilities_mirror_$NAME.txt
  echo "Seeking pip3 installed packages at $NAME" | tee -a vulnerabilities_mirror_$NAME.txt
  echo "----------------------------------------------------------------------------------------" | tee -a vulnerabilities_mirror_$NAME.txt
  sshpass -p ${SECRET_PASS} scp -o StrictHostKeyChecking=no -o LogLevel=error checkPip.sh ${SECRET_USER}@${IP}:
  PIP_OUT=$(sshpass -p ${SECRET_PASS} ssh -o StrictHostKeyChecking=no -o LogLevel=error ${SECRET_USER}@${IP} "chmod +x ./checkPip.sh && ./checkPip.sh" | grep -v "No hay pip")

  truncate -s0 pipFreeze
  while read -r item; do
    echo "$item" >> pipFreeze
  done <<< "$PIP_OUT"


  #Remove empty lines
  sed -i '/^$/d' pipFreeze
  #If not empty, if something then pip3 is present.
  if [ -s pipFreeze ]; then
    echo "........................................................................................" | tee -a vulnerabilities_mirror_$NAME.txt
    echo "Checking pip3 packages with safety check" | tee -a vulnerabilities_mirror_$NAME.txt
    cat pipFreeze | tee -a vulnerabilities_mirror_$NAME.txt
    echo | tee -a vulnerabilities_mirror_$NAME.txt
    safety check --full-report -r pipFreeze | tee -a vulnerabilities_mirror_$NAME.txt
    echo "........................................................................................" | tee -a 
  else
    echo "No pip3 present" | tee -a vulnerabilities_mirror_$NAME.txt
  fi

  sshpass -p ${SECRET_PASS} ssh -o StrictHostKeyChecking=no -o LogLevel=error ${SECRET_USER}@${IP} "rm -r checkPip.sh"

  echo "----------------------------------------------------------------------------------------" | tee -a vulnerabilities_mirror_$NAME.txt
  echo | tee -a vulnerabilities_mirror_$NAME.txt
  echo | tee -a vulnerabilities_mirror_$NAME.txt
  echo | tee -a vulnerabilities_mirror_$NAME.txt
  echo "Seeking npm installed packages at $NAME"
  echo "----------------------------------------------------------------------------------------"
  sshpass -p ${SECRET_PASS} scp -o StrictHostKeyChecking=no -o LogLevel=error checkNode.sh ${SECRET_USER}@${IP}:
  NPM_OUT=$(sshpass -p ${SECRET_PASS} ssh -o StrictHostKeyChecking=no -o LogLevel=error ${SECRET_USER}@${IP} "chmod +x ./checkNode.sh && ./checkNode.sh" | grep -v "No hay npm")
  sshpass -p ${SECRET_PASS} ssh -o StrictHostKeyChecking=no -o LogLevel=error ${SECRET_USER}@${IP} "rm -r checkNode.sh"

  docker stop nodeVulnerabilities &>/dev/null
  docker rm nodeVulnerabilities &>/dev/null

  docker run -d --name nodeVulnerabilities node:10.15.3-slim bash -c 'while true; do ping localhost; sleep 1; done' &>/dev/null
  docker exec nodeVulnerabilities bash -c "npm install" &>/dev/null
  docker exec nodeVulnerabilities bash -c "npm update" &>/dev/null
  docker exec nodeVulnerabilities bash -c "npm install -g npm-audit-html" &>/dev/null
  docker exec nodeVulnerabilities bash -c "npm init -y" &>/dev/null
  while read -r item; do
    NODE_PACKAGE=$(echo $item | tr -d "")
    docker exec nodeVulnerabilities bash -c "npm install --no-optional $NODE_PACKAGE" &>/dev/null
  done <<< "$NPM_OUT"

  docker exec nodeVulnerabilities bash -c "npm audit --json | npm-audit-html"
  docker cp nodeVulnerabilities:npm-audit.html ./vulnerabilities_mirror_${NAME}_npm-audit.html
  docker stop nodeVulnerabilities
  docker rm nodeVulnerabilities

  echo "----------------------------------------------------------------------------------------"
  echo
  cp vulnerabilities_mirror_${NAME}.txt $WORKSPACE/mirrorServers/${NAME}_`date +%Y%m%d`.txt
  cp vulnerabilities_mirror_${NAME}_npm-audit.html $WORKSPACE/mirrorServers/${NAME}_npm-audit_`date +%Y%m%d`.html

  mkdir -p /var/www/html/reports/Vulnerabilities/mirror-servers/$NAME
  cp $WORKSPACE/mirrorServers/${NAME}_`date +%Y%m%d`.txt $WORKSPACE/mirrorServers/${NAME}_npm-audit_`date +%Y%m%d`.html /var/www/html/reports/Vulnerabilities/mirror-servers/$NAME/
done

